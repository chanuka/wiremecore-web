package com.cba.core.wiremeweb.model;
// Generated Jun 20, 2023 2:49:48 PM by Hibernate Tools 4.3.1


import jakarta.persistence.*;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;


/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user"
)
@EntityListeners(AuditingEntityListener.class) // enable entity level auditing for create,modified attributes
public class User implements java.io.Serializable {

    private Integer id;
    private Device device;
    private Merchant merchant;
    private MerchantCustomer merchantCustomer;
    private Status status;
    private UserType userType;
    private String name;
    private String userName;
    private String password;
    private String email;
    private String contactNo;
    private Date lastLoginTime;
    private int loginAttempt;
    private String sessionId;
    @CreatedBy
    private String createdBy;
    @LastModifiedBy
    private String modifiedBy;
    @CreatedDate
    private Date createdAt;
    @LastModifiedDate
    private Date updatedAt;
    private Set<TokenRefresh> refreshTokens = new HashSet<TokenRefresh>(0);
    private Set<UserRole> userRolesForUserId = new HashSet<UserRole>(0);
    private Set<OnetimePassword> onetimePasswords = new HashSet<OnetimePassword>(0);
    private Set<UserConfig> userConfigs = new HashSet<UserConfig>(0);

    public User() {
    }

    public User(Integer userId) {
        this.id = userId;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "device_id")
    public Device getDevice() {
        return this.device;
    }

    public void setDevice(Device device) {
        this.device = device;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "merchant_id")
    public Merchant getMerchant() {
        return this.merchant;
    }

    public void setMerchant(Merchant merchant) {
        this.merchant = merchant;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "merchant_customer_id")
    public MerchantCustomer getMerchantCustomer() {
        return this.merchantCustomer;
    }

    public void setMerchantCustomer(MerchantCustomer merchantCustomer) {
        this.merchantCustomer = merchantCustomer;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "status", nullable = false)
    public Status getStatus() {
        return this.status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_type", nullable = false)
    public UserType getUserType() {
        return userType;
    }

    public void setUserType(UserType userType) {
        this.userType = userType;
    }

    @Column(name = "name", nullable = false, length = 45)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "user_name", nullable = false, length = 45)
    public String getUserName() {
        return this.userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }


    @Column(name = "password", length = 65535, columnDefinition = "TEXT")
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "email", length = 50)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "contact_no", length = 12)
    public String getContactNo() {
        return this.contactNo;
    }

    public void setContactNo(String contactNo) {
        this.contactNo = contactNo;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_login_time", length = 19)
    public Date getLastLoginTime() {
        return this.lastLoginTime;
    }

    public void setLastLoginTime(Date lastLoginTime) {
        this.lastLoginTime = lastLoginTime;
    }

    @Column(name = "login_attempt", nullable = false)
    public int getLoginAttempt() {
        return this.loginAttempt;
    }

    public void setLoginAttempt(int loginAttempt) {
        this.loginAttempt = loginAttempt;
    }

    @Column(name = "session_id")
    public String getSessionId() {
        return this.sessionId;
    }

    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }

    @Column(name = "created_by", nullable = false, length = 45)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "modified_by", length = 45)
    public String getModifiedBy() {
        return this.modifiedBy;
    }

    public void setModifiedBy(String modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", nullable = false, length = 19)
    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_at", length = 19)
    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<TokenRefresh> getRefreshTokens() {
        return this.refreshTokens;
    }

    public void setRefreshTokens(Set<TokenRefresh> refreshTokens) {
        this.refreshTokens = refreshTokens;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUserId")
    public Set<UserRole> getUserRolesForUserId() {
        return this.userRolesForUserId;
    }

    public void setUserRolesForUserId(Set<UserRole> userRolesForUserId) {
        this.userRolesForUserId = userRolesForUserId;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<OnetimePassword> getOnetimePasswords() {
        return this.onetimePasswords;
    }

    public void setOnetimePasswords(Set<OnetimePassword> onetimePasswords) {
        this.onetimePasswords = onetimePasswords;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<UserConfig> getUserConfigs() {
        return this.userConfigs;
    }

    public void setUserConfigs(Set<UserConfig> userConfigs) {
        this.userConfigs = userConfigs;
    }

}


